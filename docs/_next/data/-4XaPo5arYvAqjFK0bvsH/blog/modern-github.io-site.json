{"pageProps":{"data":{"title":"Build a Modern GitHub Page Site Using Next.js","description":"A guide to build a GitHub Page blog using Next.js, complete with markdown and code block highlighting","date":"2020-09-24"},"content":"\n## Background\n\nI recently decided to start a tech blog that would be hosted as a static site using GitHub Pages. I had previously seen that these static sites could be generated with Jekyll. But I don’t know Jekyll and don’t have any experience with Ruby. So I did some research into if React could be used and that's how I found [Next.js](https://nextjs.org/). I read through a lot of Next.js tutorials but couldn't find exactly what I was looking for. I wanted a site that could render GitHub style markdown as well as highlight code blocks. It took me a day to figure out how to implement everything and I thought other people might be interested in the same features. So I put together this guide that is a combination of what I learned and the tutorials from [CSS-Tricks](https://css-tricks.com/building-a-blog-with-next-js/), [Perry Raskin](https://raskin.me/blog/beautify-code-in-your-next-js-blog), and [Jose Felix] (https://dev.to/jfelx/how-to-make-a-static-blog-with-next-js-2bd6). This guide will be for a very basic site. I'll add another post that will address more features such as SEO at a later time.\n\n## Initial Setup\n\nTo start off, we’ll use Next.js’s app boilerplate to generate an initial project\n\n```sh\nnpx create-next-app <blog name> --use-npm\n```\n\nOnce the script is complete, _cd_ into the project directory. You'll be able to see the boilerplate app at [http://localhost:3000](http://localhost:3000) after running\n\n```sh\nnpm run dev\n```\n\nWe'll need a few packages for the features we want so go ahead and install the required dependencies using\n\n```sh\nnpm install --save-dev raw-loader gray-matter react-markdown react-syntax-highlighter\n```\n\n### raw-loader\n\n[raw-loader](https://www.npmjs.com/package/raw-loader) allows us to import text files as if they were a module using the ES6 import statement\n\n### gray-matter\n\n[gray-matter](https://www.npmjs.com/package/gray-matter) is used to parse the front-matter information in your markdown files\n\n### react-markdown\n\n[react-markdown](https://www.npmjs.com/package/react-markdown) converts markdown files into html\n\n### react-syntax-highlighter\n\n[react-syntax-highlighter](https://www.npmjs.com/package/react-syntax-highlighter) is used as a code block renderer within react-markdown to highlight code blocks\n\n## Create the Static Site\n\nNext.js uses React behind the scenes to render pages. Each React file inside the _/pages_ folder will be rendered as a static page. For example, _/pages/about.js_ will be rendered at _/about_ and _/pages/blog/first-post.js_ at _/blog/first-post_. The only exception is _index.js_, which will be rendered at _/_. Next.js can also handle dynamic routing using slugs and a _\\[slug\\].js_ component. It will also route you to a default 404 page for non-existent components.\n\nThe entry point for Next.js is _/pages/index.js_. You can modify the JSX within it and you'll see Next.js takes care of hot reloading the page with updates. Let's start by deleting _/pages/api_ and simpliflying _Home_ with a placeholder:\n\n#### /pages/index.js\n\n```jsx\n// import Head from 'next/head'\n// import styles from '../styles/Home.module.css'\n\nexport default function Home() {\n  return (\n    <div>\n      <h1>hello</h1>\n    </div>\n  )\n}\n```\n\nnext let's create two blog posts and place them inside of _\\_posts_ at your project's root directory\n\n#### /\\_posts/first-post.md\n\n```md\n---\ntitle: First Post\ndescription: Sample First Post\ndate: 2020-09-24\n---\n\n# Header 1\n\n## Header 2\n\n### Header 3\n\n#### header 4\n\n## Table of Contents\n\n- Implements [GitHub Flavored Markdown](https://github.github.com/gfm/)\n- Renders actual, \"native\" React DOM elements\n- Allows you to escape or skip HTML (try toggling the checkboxes above)\n- If you escape or skip the HTML, no `dangerouslySetInnerHTML` is used! Yay!\n\n## HTML block below\n\n> This blockquote will change based on the HTML settings above.\n\n## Tables?\n\n| Feature   | Support |\n| --------- | ------- |\n| tables    | ✔       |\n| alignment | ✔       |\n| wewt      | ✔       |\n```\n\n#### /\\_posts/second-post.md\n\n````md\n---\ntitle: Second Post\ndescription: Sample Second Post\ndate: 2020-09-25\n---\n\n## Python code block\n\n```python\nimport numpy as np\n\ndef hello():\n    print('this is working')\n```\n\n## JS code block\n\n```js\nimport React from 'react'\nconsole.log('this is working')\n```\n````\n\nWe'll create two api functions for our app. The first function will find all markdown files in _\\_posts_ and return an object with its front-matter information. The second function will return the contents of a markdown file given its file slug.\n\n#### /api.js\n\n```js\nimport matter from 'gray-matter'\n\nexport const getAllPosts = async () => {\n  const context = require.context('./_posts', false, /\\.md$/)\n  const posts = []\n  for (const path of context.keys()) {\n    const fileName = path.slice(2)\n    const post = await import(`./_posts/${fileName}`)\n    const content = matter(post.default)\n    posts.push({\n      slug: fileName.replace('.md', ''),\n      title: content.data.title,\n      description: content.data.description,\n    })\n  }\n  return posts\n}\n\nexport const getPostBySlug = async (slug) => {\n  const post = await import(`./_posts/${slug}.md`)\n  const content = matter(post.default)\n  content.data.date = content.data.date.toString()\n  return {\n    data: content.data,\n    content: content.content,\n  }\n}\n```\n\nBoth functions will import the markdown files using the ES6 import style. For this to work correctly, we'll need to tell Next.js to use raw-loader on the files. This is done with a configuration file. You may need to restart your Next.js development server to ensure this configuration is set. Just to be safe, ctrl+c and restart your dev server.\n\n#### /next.config.js\n\n```js\nmodule.exports = {\n  target: 'serverless',\n  webpack: function (config) {\n    config.module.rules.push({test: /\\.md$/, use: 'raw-loader'})\n    return config\n  },\n}\n```\n\nWe want an array of all posts every time _index.js_ is loaded in order to list them. We can get this by adding the below code to _index.js_. Next.js runs it every time _index.js_ is loaded and passes props to _index.js_'s default function.\n\n#### /pages/index.js\n\n```js\nexport const getStaticProps = async (context) => {\n  const posts = await getAllPosts()\n  return {\n    props: {\n      posts: posts,\n    },\n  }\n}\n```\n\nLet's go back to _Home_ and modify it now that we're getting an array of all available posts. We'll display each post's title as a link in an unordered list:\n\n#### /pages/index.js\n\n```\nimport Link from 'next/link'\nimport {getAllPosts} from '../api'\n\nexport default function Home({posts}) {\n  return (\n    <div>\n      <ul>\n        {posts.map((post, i) => {\n          return (\n            <li key={i}>\n              <Link href={'/blog/[slug]'} as={`/blog/${post.slug}`}>\n                <a>{post.title}</a>\n              </Link>\n            </li>\n          )\n        })}\n      </ul>\n    </div>\n  )\n}\n\nexport const getStaticProps = async (context) => {\n  const posts = await getAllPosts()\n  return {\n    props: {\n      posts: posts,\n    },\n  }\n}\n\n```\n\nWith this you should see a list of your two posts now. They might not look like a typical link though. This is because of Next.js's default css. You can either turn off the entire css by commenting out the import in _/pages/\\_app.js_ or commenting out the _a_ tag css in _/styles/globals.css_.\n\nClicking on the link will result in a 404 route. Let's fix that with dynamic routing. Create a dynamic component with the following code\n\n#### pages/blog/\\[slug\\].js\n\n```jsx\nimport {getPostBySlug, getAllPosts} from '../../api'\nimport ReactMarkdown from 'react-markdown'\n\nconst Post = ({data, content}) => {\n  return (\n    <div className=\"container\">\n      <div className=\"Post\">\n        <ReactMarkdown source={content} />\n      </div>\n    </div>\n  )\n}\n\nexport const getStaticProps = async (context) => {\n  return {\n    props: await getPostBySlug(context.params.slug),\n  }\n}\n\nexport const getStaticPaths = async () => {\n  let paths = await getAllPosts()\n  paths = paths.map((post) => ({\n    params: {slug: post.slug},\n  }))\n  return {\n    paths: paths,\n    fallback: false,\n  }\n}\n\nexport default Post\n```\n\n_getStaticPaths_ is run first by Next.js and it uses _getAllPosts_ to define a list of paths that have to be rendered to HTML at build time. _getStaticProps_ is then run by Next.js to generate dynamic props that are passed to the file's default component. It find's the dynamic route's slug, and executes _getPostBySlug_ to pass _Post_ the post's data as a prop. That data is the raw post file in string form. Within _Post_ that raw markdown is converted into nicely formatted HTML using _react-markdown_. With the _\\[slug\\].js_ file created, you should be able to click each link and see your sample posts rendered with HTML.\n\nIf you take a look at _post-one_ you'll notice that it's now rendered in HTML but it's not nicely styled the way GitHub handles markdown. If you want the styling to be similar to GitHub, you'll need to install _github-markdown.css_\n\n```sh\nnpm install github-markdown-css\n```\n\nNext you'll need to import the stylesheet globally. This is done in _/pages/\\_app.js_.\n\n#### /pages/\\_app.js\n\n```jsx\nimport 'github-markdown-css/github-markdown.css'\n\nfunction MyApp({Component, pageProps}) {\n  return <Component {...pageProps} />\n}\n\nexport default MyApp\n```\n\nAnd one last thing. The styles provided by _github-markdown-css_ target only elements within a _markdown-body_ class. So go back to _\\[slug\\].js_ and add a classname to the _Reactmarkdown_ component\n\n```jsx\n<ReactMarkdown source={content} className=\"markdown-body\" />\n```\n\nNow if you refresh the page, you'll notice a nicely rendered, GitHub style page. However, if you check out _second-post_, you'll see that the codeblocks don't look great. The blocks aren't highlighting the code. Let's take care of that.\n\nBack in _\\[slug\\].js_, we'll need to do a few imports. I'll be using [highlight.js](https://www.npmjs.com/package/highlight.js) but you can use [Prism](https://www.npmjs.com/package/prismjs) if you like. You'll also have to decide on a styling theme. Thankfully, the _react-syntax-highlighter_ team have created a awesome [demo site](https://react-syntax-highlighter.github.io/react-syntax-highlighter/demo/) where you can try out different themes to see what you like. Just select your desired syntax highlighter (_highlight.js_ or _Prism_) then scroll through the different themes until you find something you like. I'll go with the _github_ style for this guide:\n\n```jsx\n//using highlight.js\nimport {Light as SyntaxHighlighter} from 'react-syntax-highlighter'\nconst github = require('react-syntax-highlighter/dist/cjs/styles/hljs/github')\n  .default\n\n//using Prism\nimport {Prism as SyntaxHighlighter} from 'react-syntax-highlighter'\nconst github = require('react-syntax-highlighter/dist/cjs/styles/prism/github')\n  .default\n```\n\nAfter importing those libraries, you'll need to make a code block component and pass that to _ReactMarkdown_ as a renderers prop. You're final _\\[slug\\].js_ should look like this\n\n#### /pages/blog/\\[slug\\].js\n\n```jsx\nimport {getPostBySlug, getAllPosts} from '../../api'\nimport ReactMarkdown from 'react-markdown'\nimport {Light as SyntaxHighlighter} from 'react-syntax-highlighter'\nconst github = require('react-syntax-highlighter/dist/cjs/styles/hljs/github')\n  .default\n\nconst CodeBlock = ({language, value}) => {\n  return (\n    <SyntaxHighlighter language={language} style={github}>\n      {value}\n    </SyntaxHighlighter>\n  )\n}\n\nconst Post = ({data, content}) => {\n  return (\n    <div className=\"container\">\n      <div className=\"Post\">\n        <ReactMarkdown\n          source={content}\n          className=\"markdown-body\"\n          renderers={{code: CodeBlock}}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport const getStaticProps = async (context) => {\n  console.log('generate static props')\n  console.log(context)\n  return {\n    props: await getPostBySlug(context.params.slug),\n  }\n}\n\nexport const getStaticPaths = async () => {\n  console.log('generate static paths')\n  let paths = await getAllPosts()\n  paths = paths.map((post) => ({\n    params: {slug: post.slug},\n  }))\n  console.log(paths)\n  return {\n    paths: paths,\n    fallback: false,\n  }\n}\n\nexport default Post\n```\n\nWith that update, we've completed writing the static site. You can now add posts in markdown format to _/\\_posts_ and your site will dynamically generate links as well as render them into great looking HTML pages. Now we just need to deploy the necessary files to GitHub.\n\n## Deploying to GitHub\n\nI'm assuming you're familiar with how to push repositories to GitHub. So I won't be going over that. There are requirements on repository names, so please checkout[ GitHub Pages](https://pages.github.com/) if you don't already have one setup. The following steps assume that you have set up a GitHub Page repo and have added its link as a remote repository to your local project.\n\nOpen up _package.json_ and add _\"export\": \"next export -o docs\"_ to the _scripts_ object. This will tell Next.js to export your project into static files within the _/docs_ directory. Now, run the following commands\n\n```sh\nnpm run build\nnpm run export\n```\n\nAfter the export is complete, you'll need to add a blank _.nojekyll_ file within the _/docs_ directory. This is because by default _Jekyll_ ignores any folder with a leading underscore. But we're not using _Jekyll_ here and we'll need those leading underscore directories. Finally you'll need to add, commit and push changes to your GitHub repository. With the push finished, you can go to GitHub and change the _Source_ directory of your GitHub Page to _docs_ using this [guide](https://docs.github.com/en/github/working-with-github-pages/configuring-a-publishing-source-for-your-github-pages-site). And that's it. It might take a minute for your page to go live, but you have a framework for a blog now.\n\n## Non-Personal GitHub Page\n\nIf you're building a GitHub Page for one of your repos, you'll probably run into problems with page dependencies. Check out this guide by [Mikhail Bashurov](https://itnext.io/next-js-app-on-github-pages-768020f2b65e) to see how to solve that.\n"},"__N_SSG":true}